%% Initialization
clear ; 
close all; 
clc

%% parameters setup
input_layer_size  = 4096; 
hidden_layer_size = 30;  
num_labels = 9;         

%% Loading Data 

% Load Training Data and labels
load('all_image_data.mat');
%Read labels
load new_labels.mat

%divide into training and validation(80% for testing and 20% for training)
m = size(all_images, 1);
[rows, columns] = size(all_images);
sel = 0.20 ;
indices = (randperm(m))';

ValidationLabels = labels(indices(1:round(sel*rows)));
TrainLabels = labels(indices(round(sel*rows)+1:end));


%% Training and Validation Datasets

ValidationSet = all_images(indices(1:round(sel*rows)),:) ;
TrainingSet= all_images(indices(round(sel*rows)+1:end),:); 

%% PCA Transformation

N= 4096;
[ATrain, YTrain, EigenValuesTrain] = PCA_transformation(TrainingSet, N);
 
%%
YValidation=ValidationSet*ATrain;

%% Initialize Parameters 

% Initialize the weights into variables Theta1 and Theta2
eps = 0.12;
%Initialize theta_1
Theta1 = rand(hidden_layer_size, 1+input_layer_size)*(2*eps)-eps;
%Initialize theta_2
Theta2 = rand(num_labels,1+ hidden_layer_size)*(2*eps)-eps;

% Unroparameters 
nn_params = [Theta1(:) ; Theta2(:)];

%% Compute Cost (Feedforward) 

[J, grad] = nnCostFunction(nn_params, input_layer_size, hidden_layer_size, ...
                   num_labels, YTrain, TrainLabels);

%% ADVANCED OPTIMIZATION
               
% Initializing Pameters 

initial_Theta1 = rand(hidden_layer_size, 1+input_layer_size)*(2*eps)-eps;
initial_Theta2 = rand(num_labels,1+ hidden_layer_size)*(2*eps)-eps;

% parameters
initial_nn_params = [initial_Theta1(:) ; initial_Theta2(:)];

%% Training Neural Network

options = optimset('MaxIter', 55);

% Return Cost and Grad values
costFunction = @(p) nnCostFunction(p, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, YTrain, TrainLabels);

% Learning Process
[nn_params, cost] = fmincg(costFunction, initial_nn_params, options);

% Obtain Theta1 and Theta2 back from nn_params
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

%% Visualize Weights 

fprintf('\nVisualizing Neural Network... \n')

figure(2)
%displayData(Theta1(:, 2:end));

%% Predict the Output

YValidationPred = determine_output(Theta1, Theta2, YValidation);

fprintf('\nTraining Set Accuracy: %f\n', mean(double(YValidationPred == ValidationLabels)) * 100);
plotconfusion(ind2vec(ValidationLabels'),ind2vec(YValidationPred'));
